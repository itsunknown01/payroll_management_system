// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @unique @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?   @unique
  role          UserRole  @default(USER)
  accounts      Account[]
}

model Account {
  id                String  @id @unique @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @unique @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @unique @default(uuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// dashboard database
model Department {
  id        Int        @id @unique @default(autoincrement())
  name      String
  positions Position[]
  employees Employee[]
}

model Position {
  id           Int        @id @unique @default(autoincrement())
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  name         String
  employees    Employee[]
}

model Employee {
  id           Int        @id @unique @default(autoincrement())
  employee_no  String        @unique
  firstName    String
  middleName   String?
  lastName     String
  departmentId Int
  department   Department @relation(fields: [departmentId], references: [id])
  positionId   Int
  position     Position   @relation(fields: [positionId], references: [id])
  salary       Int

  employeeAllowance EmployeeAllowance[]
  employeeDeduction EmployeeDeduction[]
  attendances       Attendance[]
}

enum PayType {
  Monthly
  Semi_Monthly
}

enum StatusType {
  New
  Computed
}

model Payroll {
  id           Int           @id @unique @default(autoincrement())
  refNo        String        @unique
  From         DateTime
  To           DateTime
  type         PayType       @default(Monthly)
  status       StatusType    @default(New)
  payrollLists PayrollList[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Deduction {
  id          Int    @id @unique @default(autoincrement())
  deduction   String
  description String

  employeeDeduction EmployeeDeduction[]
}

model Allowance {
  id          Int    @id @unique @default(autoincrement())
  allowance   String
  description String

  employeeAllowance EmployeeAllowance[]
}

model PayrollList {
  id              Int     @id @unique @default(autoincrement())
  payrollId       Int
  payroll         Payroll @relation(fields: [payrollId], references: [id])
  present         Int
  absent          Int
  late            String
  salary          Float
  allowanceAmount Float
  allowances      String
  deductionAmount Float
  deductions      String
  net             Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum EmployPayType {
  Monthly
  Semi_Monthly
  Once
}

model EmployeeAllowance {
  id            Int           @id @unique @default(autoincrement())
  employeeId    Int
  employee      Employee      @relation(fields: [employeeId], references: [id])
  allowanceId   Int
  allowance     Allowance     @relation(fields: [allowanceId], references: [id])
  salaryType    EmployPayType @default(Once)
  allowanceDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmployeeDeduction {
  id            Int           @id @unique @default(autoincrement())
  employeeId    Int
  employee      Employee      @relation(fields: [employeeId], references: [id])
  deductionId   Int
  deduction     Deduction     @relation(fields: [deductionId], references: [id])
  salaryType    EmployPayType @default(Once)
  deductionDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Logs {
  AM_IN
  AM_OUT
  PM_IN
  PM_OUT
}

model Attendance {
  id          Int      @id @unique @default(autoincrement())
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])
  logType     Logs     @default(AM_IN)
  datetimeLog DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
